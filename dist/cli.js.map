{
  "version": 3,
  "sources": ["../src/cli.js", "../package.json", "../src/i18n.js", "../src/transform.js", "../src/xml/SaxWrapper.js", "../src/xml/Observer.js", "../src/xml/SkippedObserver.js", "../src/xml/TestCaseObserver.js", "../src/xml/CommentObserver.js", "../src/xml/TextObserver.js", "../src/xml/BreakdownObserver.js", "../src/xml/ErrorObserver.js", "../src/xml/FailureObserver.js", "../src/xml/YamlObserver.js", "../src/loader.js", "../src/xml/TestSuiteObserver.js", "../src/TestTimer.js"],
  "sourcesContent": ["#!/usr/bin/env node\n\nimport { exit, stdin, stdout } from 'process'\nimport { pipeline } from 'stream/promises'\n\nimport yargs from 'yargs'\n\nimport pkg from '../package.json' with { type: 'json' }\n\nimport { getDescriptions } from './i18n.js'\nimport Transform from './transform.js'\n\nconst { argv } = yargs(process.argv.slice(2))\n  .boolean('fast')\n  .describe(await getDescriptions(yargs().locale()))\n  .default({\n    fast: false,\n  })\n  .help()\n  .version(pkg.version)\n\nconst transform = new Transform(argv)\n\nawait pipeline(stdin, transform, stdout)\nexit(0)\n", "{\n  \"name\": \"junit-tap\",\n  \"type\": \"module\",\n  \"bin\": \"./dist/cli.js\",\n  \"engines\": {\n    \"node\": \">= 14.18.3\"\n  },\n  \"version\": \"0.2.0\",\n  \"repository\": \"github:marek629/junit-tap\",\n  \"homepage\": \"https://github.com/marek629/junit-tap\",\n  \"keywords\": [\n    \"tap\",\n    \"junit\",\n    \"testing\",\n    \"test\",\n    \"anything\",\n    \"protocol\"\n  ],\n  \"license\": \"MIT\",\n  \"packageManager\": \"yarn@4.1.1\",\n  \"devDependencies\": {\n    \"ava\": \"^6.1.2\",\n    \"c8\": \"^9.1.0\",\n    \"esbuild\": \"^0.20.2\",\n    \"sinon\": \"^17.0.1\",\n    \"tap-merge\": \"^0.3.1\"\n  },\n  \"dependencies\": {\n    \"dirname-filename-esm\": \"^1.1.1\",\n    \"ramda\": \"^0.30.1\",\n    \"sax\": \"^1.3.0\",\n    \"supertap\": \"^3.0.1\",\n    \"yaml\": \"^2.4.1\",\n    \"yargs\": \"^17.7.2\"\n  },\n  \"scripts\": {\n    \"build\": \"esbuild src/cli.js --bundle --platform=node --packages=external --target=es2020 --outdir=dist --supported:top-level-await=true --format=esm --sourcemap=external && chmod +x dist/cli.js\",\n    \"build:watch\": \"esbuild src/cli.js --bundle --platform=node --packages=external --target=es2020 --outdir=dist --supported:top-level-await=true --format=esm --sourcemap=external --watch\",\n    \"coverage\": \"c8 --src src -x '.pnp.*js' -x 'test/**'  --check-coverage -r text -r html -r lcov ava\",\n    \"demo\": \"node dist/cli.js < test/data/time.xml | tap-merge\",\n    \"demo:fast\": \"node dist/cli.js --fast < test/data/time.xml  | tap-merge\",\n    \"test\": \"ava --tap\",\n    \"test:watch\": \"ava --watch --fail-fast\"\n  }\n}\n", "import { join } from 'path'\nimport { readFile } from 'fs/promises'\n\nimport { dirname } from 'dirname-filename-esm'\nimport { parse } from 'yaml'\n\nconst i18n = `${join(dirname(import.meta), '..', 'i18n')}`\n\nexport const getDescriptions = async lang => {\n  const [locale] = lang.split('_', 1)\n  const en = parse(await readFile(join(i18n, 'en.yml'), 'utf8'))\n  if (locale === 'en') return en\n  try {\n    const translation = parse(await readFile(join(i18n, `${locale}.yml`), 'utf8'))\n    return { ...en, ...translation }\n  }\n  catch {\n    return en\n  }\n}\n", "import { EOL } from 'os'\nimport { Transform } from 'stream'\n\nimport SaxWrapper from './xml/SaxWrapper.js'\nimport SkippedObserver from './xml/SkippedObserver.js'\nimport TestCaseObserver from './xml/TestCaseObserver.js'\nimport TestSuiteObserver from './xml/TestSuiteObserver.js'\nimport { error, failure, saxParser } from './loader.js'\nimport TestTimer from './TestTimer.js'\n\nclass JUnitTAPTransform extends Transform {\n  #sax = new SaxWrapper\n  #tap = ''\n  #buffer = []\n  #testCase\n  #testSuite\n  #failure\n  #error\n  #skipped\n  #timer\n  #fast = false\n\n  constructor ({ fast = false, scheduler, ...options }) {\n    super(options)\n    saxParser(this.#sax)\n\n    this.#fast = fast\n    this.#timer = new TestTimer(scheduler, this.push.bind(this))\n    this.#testSuite = new TestSuiteObserver(this.#sax, this.#buffer, this.#fast, this.#timer, this.#flush.bind(this))\n    this.#testCase = new TestCaseObserver(this.#sax, this.#buffer, this.#fast, this.#timer, this.#flush.bind(this), this.#testSuite)\n    this.#failure = failure(this.#sax)\n    this.#error = error(this.#sax)\n    this.#skipped = new SkippedObserver(this.#sax, this.#testSuite)\n\n    this.#sax.onopentag = tag => {\n      switch (tag.name) {\n        case 'testsuite':\n          this.#testSuite.onOpen(tag)\n          break\n        case 'testcase':\n          this.#testCase.onOpen(tag)\n          break\n        case 'failure':\n          this.#failure.onOpen(tag)\n          break\n        case 'error':\n          this.#error.onOpen(tag)\n          break\n        case 'skipped':\n          this.#skipped.onOpen(tag)\n          break\n      }\n    }\n    this.#sax.onclosetag = tag => {\n      switch (tag) {\n        case 'testcase':\n          this.#testCase.onClose(tag)\n          break\n        case 'testsuite':\n          this.#testSuite.onClose(tag)\n          break\n        case 'failure':\n          this.#failure.onClose(tag)\n          break\n        case 'error':\n          this.#error.onClose(tag)\n          break\n      }\n    }\n  }\n\n  #flush () {\n    this.#tap += this.#buffer.join(EOL)\n    this.#buffer.length = 0\n    if (!this.#tap.endsWith('\\n')) this.#tap += '\\n'\n\n    this.#timer.enqueue(this.#tap)\n    this.#tap = ''\n  }\n\n  _transform (chunk, encoding, next) {\n    this.#sax.write(chunk, encoding)\n    next()\n  }\n\n  _flush (next) {\n    this.#timer.flush(next)\n  }\n}\n\nexport default JUnitTAPTransform\n", "import { randomUUID } from 'crypto'\nimport { EventEmitter } from 'events'\n\nimport sax from 'sax'\n\nclass SaxWrapper extends EventEmitter {\n  #sax = new sax.SAXParser(true)\n  #uuid = randomUUID()\n\n  constructor () {\n    super()\n    this.#sax.ontext = text => this.emit('text', text)\n  }\n\n  get uuid () {\n    return this.#uuid\n  }\n\n  set onopentag (cb) {\n    this.#sax.onopentag = cb\n  }\n\n  set onclosetag (cb) {\n    this.#sax.onclosetag = cb\n  }\n\n  set oncdata (cb) {\n    this.#sax.oncdata = cb\n  }\n\n  write (chunk, encoding) {\n    return this.#sax.write(chunk, encoding)\n  }\n}\n\nexport default SaxWrapper\n", "class Observer {\n  /**\n   * @type sax.SAXParser\n   */\n  _sax\n\n  constructor (sax) {\n    this._sax = sax\n  }\n\n  flush () {\n    throw new TypeError('Observer is an interface!')\n  }\n}\n\nexport default Observer\n", "import Observer from './Observer.js'\n\nclass SkippedObserver extends Observer {\n  #testSuite\n\n  constructor (sax, testSuite) {\n    super(sax)\n    this.#testSuite = testSuite\n  }\n\n  onOpen ({ isSelfClosing }) {\n    if (isSelfClosing) this.#testSuite.testSkipped()\n  }\n}\n\nexport default SkippedObserver\n", "import { test } from 'supertap'\nimport { stringify } from 'yaml'\n\nimport { comment, error, failure, yaml } from '../loader.js'\nimport Observer from './Observer.js'\n\nclass TestCaseObserver extends Observer {\n  #cases = []\n  #buffer = []\n  #fast = false\n  #timer\n  #flush\n  #testSuite\n  #failure\n  #error\n  #yaml\n  #comment\n\n  constructor (sax, buffer, isFast, timer, flush, testSuite) {\n    super(sax)\n    this.#buffer = buffer\n    this.#fast = isFast\n    this.#timer = timer\n    this.#flush = flush\n    this.#testSuite = testSuite\n    this.#failure = failure(sax)\n    this.#error = error(sax)\n    this.#yaml = yaml(sax)\n    this.#comment = comment(sax)\n    this.#comment.testCase = this\n    this.#testSuite.testCase = this\n  }\n\n  get empty () {\n    return this.#cases.length === 0\n  }\n\n  onOpen ({ name, attributes, isSelfClosing }) {\n    this.#cases.push({ name, attributes, isSelfClosing })\n    if (isSelfClosing) this.#testSuite.testPassed()\n  }\n\n  onClose () {\n    const { attributes, isSelfClosing } = this.#cases.pop()\n    if (!isSelfClosing && !(this.#failure.empty && this.#error.empty)) {\n      this.#testSuite.testFailed()\n    }\n    const title = attributes.name\n    if ('time' in attributes) {\n      this.#yaml.duration_ms = attributes.time * 1000\n      if (!this.#fast) {\n        this.#timer.ms = this.#yaml.duration_ms\n      }\n    }\n    const yaml = this.#yaml.values\n    if (!this.#comment.empty) yaml.comments = this.#comment.values\n    if (!this.#failure.empty) yaml.failures = this.#failure.attributes\n    if (!this.#error.empty) yaml.errors = this.#error.attributes\n    this.#buffer.push(test(title, {\n      index: this.#testSuite.testIndex(),\n      passed: this.#failure.empty && this.#error.empty,\n    }))\n    if (Object.keys(yaml).length > 0) {\n      this.#buffer.push(\n        '  ---',\n        stringify(yaml).replace(/^/gm, '  ').replace(/\\n  $/, ''),\n        '  ...',\n      )\n    }\n    this.#comment.flush()\n    this.#failure.flush()\n    this.#error.flush()\n    this.#yaml.flush()\n\n    if (this.#timer.ms > 0) {\n      this.#timer.consume()\n      this.#flush()\n    }\n  }\n\n  flush () {\n    const a = [...this.#cases]\n    this.#cases.length = 0\n    return a\n  }\n}\n\nexport default TestCaseObserver\n", "import Observer from './Observer.js'\n\nclass CommentObserver extends Observer {\n  #comments = []\n  #testCase\n\n  constructor (sax) {\n    super(sax)\n    this._sax.oncdata = data => {\n      if (!this.#testCase.empty) this.#comments.push(data)\n    }\n  }\n\n  set testCase (value) {\n    this.#testCase = value\n  }\n\n  get empty () {\n    return this.#comments.length === 0\n  }\n\n  get values () {\n    return [...this.#comments]\n  }\n\n  flush () {\n    const a = this.values\n    this.#comments.length = 0\n    return a\n  }\n}\n\nexport default CommentObserver\n", "import Observer from './Observer.js'\n\nclass TextObserver extends Observer {\n  #text = ''\n  #breakdown\n\n  constructor (sax, breakdown) {\n    super(sax)\n    this.#breakdown = breakdown\n    sax.on('text', text => {\n      if (this.#breakdown.empty) return\n      const t = text.trimEnd()\n      if (t.length > 0) this.#text = t\n    })\n  }\n\n  flush () {\n    const t = this.#text\n    this.#text = ''\n    return t\n  }\n}\n\nexport default TextObserver\n", "import Observer from './Observer.js'\nimport TextObserver from './TextObserver.js'\n\nclass BreakdownObserver extends Observer {\n  _list = []\n  _text\n\n  constructor (sax) {\n    super(sax)\n    this._text = new TextObserver(sax, this)\n  }\n\n  get empty () {\n    return this._list.length === 0\n  }\n\n  get attributes () {\n    return this._list.map(f => f.attributes)\n  }\n\n  onOpen ({ attributes, isSelfClosing }) {\n    this._list.length = 0\n    this._list.push({ attributes, isSelfClosing })\n  }\n\n  onClose () {\n    const text = this._text.flush()\n    if (text.length > 0) {\n      this._list[this._list.length - 1].attributes.text = text\n    }\n  }\n\n  flush () {\n    const a = [...this._list]\n    this._list.length = 0\n    return a\n  }\n}\n\nexport default BreakdownObserver\n", "import BreakdownObserver from './BreakdownObserver.js'\n\nclass ErrorObserver extends BreakdownObserver {\n}\n\nexport default ErrorObserver\n", "import BreakdownObserver from './BreakdownObserver.js'\n\nclass FailureObserver extends BreakdownObserver {\n}\n\nexport default FailureObserver\n", "import { clone } from 'ramda'\n\nimport Observer from './Observer.js'\n\nclass YamlObserver extends Observer {\n  #yaml = []\n\n  constructor (sax) {\n    super(sax)\n  }\n\n  get duration_ms () {\n    return this.#yaml.duration_ms\n  }\n\n  set duration_ms (value) {\n    this.#yaml.duration_ms = value\n  }\n\n  get values () {\n    return clone(this.#yaml)\n  }\n\n  flush () {\n    const obj = this.values\n    this.#yaml = {}\n    return obj\n  }\n}\n\nexport default YamlObserver\n", "import CommentObserver from './xml/CommentObserver.js'\nimport ErrorObserver from './xml/ErrorObserver.js'\nimport FailureObserver from './xml/FailureObserver.js'\nimport TextObserver from './xml/TextObserver.js'\nimport YamlObserver from './xml/YamlObserver.js'\n\nconst scope = {}\n\nconst create = () => {\n  const xml = Object.seal({\n    sax: null,\n  })\n\n  const observer = Object.seal({\n    failure: null,\n    error: null,\n    comment: null,\n    yaml: null,\n  })\n\n  return { xml, observer }\n}\n\nconst instance = (container, key, creator, area) => value => {\n  const box = area ? area[container] : scope[value.uuid]\n  if (!box[key]) box[key] = creator(box)\n  return box[key]\n}\n\nconst setter = (container, key) => value => {\n  const { uuid: id } = value\n  scope[id] = create()\n  return instance(container, key, () => value, scope[id])()\n}\n\nconst saxParser = setter('xml', 'sax')\n\nconst failure = instance('observer', 'failure', ({ xml }) => new FailureObserver(xml.sax))\nconst error = instance('observer', 'error', ({ xml }) => new ErrorObserver(xml.sax))\nconst comment = instance('observer', 'comment', ({ xml }) => new CommentObserver(xml.sax))\nconst yaml = instance('observer', 'yaml', ({ xml }) => new YamlObserver(xml.sax))\n\nexport {\n  saxParser,\n  failure, error, comment, yaml,\n}\n", "import { finish, start } from 'supertap'\n\nimport Observer from './Observer.js'\nimport { comment, error, failure, yaml } from '../loader.js'\n\nclass TestSuiteObserver extends Observer {\n  #suites = []\n  #stats = {\n    index: 0,\n    passed: 0,\n    skipped: 0,\n    failed: 0,\n  }\n  #buffer = []\n  #fast = false\n  #timer\n  #flush\n\n  #comment\n  #failure\n  #error\n  #testCase\n  #yaml\n\n  constructor (sax, buffer, isFast, timer, flush) {\n    super(sax)\n    this.#buffer = buffer\n    this.#fast = isFast\n    this.#timer = timer\n    this.#flush = flush\n    this.#comment = comment(sax)\n    this.#failure = failure(sax)\n    this.#error = error(sax)\n    this.#yaml = yaml(sax)\n  }\n\n  set testCase (value) {\n    this.#testCase = value\n  }\n\n  testIndex () {\n    return ++this.#stats.index\n  }\n\n  testPassed () {\n    this.#stats.passed++\n  }\n\n  testSkipped () {\n    this.#stats.skipped++\n  }\n\n  testFailed () {\n    this.#stats.failed++\n  }\n\n  onOpen ({ attributes, isSelfClosing }) {\n    this.#suites.push({ attributes, isSelfClosing })\n    if (!isSelfClosing) this.#initTapData(attributes?.name ?? '')\n  }\n\n  #initTapData (testsuite) {\n    this.#stats = {\n      index: 0,\n      passed: 0,\n      skipped: 0,\n      failed: 0,\n    }\n    this.#buffer.length = 0\n    this.#buffer.push(\n      `# Subtest: ${testsuite}`,\n      start(),\n    )\n    this.#testCase.flush()\n    this.#failure.flush()\n    this.#error.flush()\n    this.#comment.flush()\n    this.#yaml.flush()\n  }\n\n  onClose () {\n    const { attributes } = this.#suites.pop()\n    if (!this.#fast && 'time' in attributes) {\n      this.#timer.ms = attributes.time * 1000\n    }\n    this.#buffer.push(finish(this.#stats))\n\n    this.#timer.finish()\n    this.#flush()\n  }\n}\n\nexport default TestSuiteObserver\n", "import { scheduler } from 'timers/promises'\n\nconst round = ms => parseFloat(ms.toFixed(2))\n\nclass TestTimer {\n  #ms = 0\n  #consumedMs = 0\n  #scheduler = scheduler\n  #promise = Promise.resolve()\n  #push\n\n  constructor (scheduler, push) {\n    if (scheduler) this.#scheduler = scheduler\n    this.#push = push\n  }\n\n  get ms () {\n    return this.#ms\n  }\n\n  set ms (value) {\n    this.#ms = round(value)\n  }\n\n  consume () {\n    this.#consumedMs += this.ms\n  }\n\n  finish () {\n    this.ms -= this.#consumedMs\n    if (this.ms < 0) this.ms = 0\n    else this.ms = this.ms\n    this.#consumedMs = 0\n  }\n\n  enqueue (tap) {\n    const ms = this.ms\n    this.#promise = this.#promise.then(() => this.#wait(ms, tap))\n    this.ms = 0\n  }\n\n  #wait (ms, tap) {\n    return this.#scheduler.wait(ms).then(() => {\n      this.#push(tap)\n    })\n  }\n\n  flush (next) {\n    this.#promise.then(() => next())\n  }\n}\n\nexport default TestTimer\n"],
  "mappings": "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",
  "names": ["sax", "sax", "sax", "sax", "sax", "sax", "_testSuite", "_yaml", "sax", "yaml", "_buffer", "_fast", "_timer", "_flush", "_comment", "_failure", "_error", "_testCase", "_yaml", "sax", "scheduler", "_sax", "_buffer", "_testCase", "_testSuite", "_failure", "_error", "_timer", "_fast", "_flush", "scheduler"]
}
