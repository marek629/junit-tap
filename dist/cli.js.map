{
  "version": 3,
  "sources": ["../src/cli.js", "../package.json", "../src/i18n.js", "../src/transform.js"],
  "sourcesContent": ["#!/usr/bin/env node\n\nimport { exit, stdin, stdout } from 'process'\nimport { pipeline } from 'stream/promises'\n\nimport yargs from 'yargs'\n\nimport pkg from '../package.json' assert { type: 'json' }\n\nimport { getDescriptions } from './i18n.js'\nimport Transform from './transform.js'\n\nconst { argv } = yargs(process.argv.slice(2))\n  .boolean('fast')\n  .describe(await getDescriptions(yargs().locale()))\n  .default({\n    fast: false,\n  })\n  .help()\n  .version(pkg.version)\n\nconst transform = new Transform(argv)\n\nawait pipeline(stdin, transform, stdout)\nexit(0)\n", "{\n  \"name\": \"junit-tap\",\n  \"type\": \"module\",\n  \"bin\": \"./dist/cli.js\",\n  \"engines\": {\n    \"node\": \">= 14.18.3\"\n  },\n  \"version\": \"0.1.1\",\n  \"repository\": \"github:marek629/junit-tap\",\n  \"homepage\": \"https://github.com/marek629/junit-tap\",\n  \"keywords\": [\n    \"tap\",\n    \"junit\",\n    \"testing\",\n    \"test\",\n    \"anything\",\n    \"protocol\"\n  ],\n  \"license\": \"MIT\",\n  \"packageManager\": \"yarn@4.1.1\",\n  \"devDependencies\": {\n    \"ava\": \"^6.1.2\",\n    \"c8\": \"^9.1.0\",\n    \"esbuild\": \"^0.20.2\",\n    \"sinon\": \"^17.0.1\",\n    \"tap-merge\": \"^0.3.1\"\n  },\n  \"dependencies\": {\n    \"dirname-filename-esm\": \"^1.1.1\",\n    \"sax\": \"^1.3.0\",\n    \"supertap\": \"^3.0.1\",\n    \"yaml\": \"^2.4.1\",\n    \"yargs\": \"^17.7.2\"\n  },\n  \"scripts\": {\n    \"build\": \"esbuild src/cli.js --bundle --platform=node --packages=external --target=es2020 --outdir=dist --supported:top-level-await=true --format=esm --sourcemap=external && chmod +x dist/cli.js\",\n    \"build:watch\": \"esbuild src/cli.js --bundle --platform=node --packages=external --target=es2020 --outdir=dist --supported:top-level-await=true --format=esm --sourcemap=external --watch\",\n    \"coverage\": \"c8 --src src -x '.pnp.*js' -x 'test/**'  --check-coverage -r text -r html -r lcov ava\",\n    \"demo\": \"node dist/cli.js < test/data/time.xml | tap-merge\",\n    \"demo:fast\": \"node dist/cli.js --fast < test/data/time.xml  | tap-merge\",\n    \"test\": \"ava --tap\",\n    \"test:watch\": \"ava --watch\"\n  }\n}\n", "import { join } from 'path'\nimport { readFile } from 'fs/promises'\n\nimport { dirname } from 'dirname-filename-esm'\nimport { parse } from 'yaml'\n\nconst i18n = `${join(dirname(import.meta), '..', 'i18n')}`\n\nexport const getDescriptions = async lang => {\n  const [locale] = lang.split('_', 1)\n  const en = parse(await readFile(join(i18n, 'en.yml'), 'utf8'))\n  if (locale === 'en') return en\n  try {\n    const translation = parse(await readFile(join(i18n, `${locale}.yml`), 'utf8'))\n    return { ...en, ...translation }\n  }\n  catch {\n    return en\n  }\n}\n", "import { EOL } from 'os'\nimport { Transform } from 'stream'\nimport { scheduler } from 'timers/promises'\n\nimport sax from 'sax'\nimport { finish, start, test } from 'supertap'\nimport { stringify } from 'yaml'\n\nconst round = ms => parseFloat(ms.toFixed(2))\n\nclass JUnitTAPTransform extends Transform {\n  #sax = new sax.SAXParser(true)\n  #tap = ''\n  #stats = {\n    index: 0,\n    passed: 0,\n    skipped: 0,\n    failed: 0,\n  }\n  #buffer = []\n  #testCases = []\n  #testSuites = []\n  #failures = []\n  #comments = []\n  #yaml = {}\n  #ms = 0\n  #fast = false\n  #scheduler = scheduler\n  #consumedMs = 0\n  #promise = Promise.resolve()\n\n  constructor ({ fast = false, scheduler, ...options }) {\n    super(options)\n\n    this.#fast = fast\n    if (scheduler) this.#scheduler = scheduler\n\n    this.#sax.onopentag = tag => {\n      switch (tag.name) {\n        case 'testsuite':\n          this.#onOpenTestSuite(tag)\n          break\n        case 'testcase':\n          this.#onOpenTestCase(tag)\n          break\n        case 'failure':\n          this.#onOpenFailure(tag)\n          break\n        case 'skipped':\n          this.#onOpenSkipped(tag)\n          break\n      }\n    }\n    this.#sax.onclosetag = tag => {\n      switch (tag) {\n        case 'testcase':\n          this.#onCloseTestCase(tag)\n          break\n        case 'testsuite':\n          this.#onCloseTestSuite(tag)\n          break\n      }\n    }\n    this.#sax.oncdata = data => {\n      if (this.#testCases.length > 0) this.#comments.push(data)\n    }\n  }\n\n  #initTapData (testsuite) {\n    this.#stats = {\n      index: 0,\n      passed: 0,\n      skipped: 0,\n      failed: 0,\n    }\n    this.#buffer = [\n      `# Subtest: ${testsuite}`,\n      start(),\n    ]\n    this.#testCases = []\n    this.#failures = []\n    this.#comments = []\n    this.#yaml = {}\n  }\n\n  #onOpenTestSuite ({ attributes, isSelfClosing }) {\n    this.#testSuites.push({ attributes, isSelfClosing })\n    if (!isSelfClosing) this.#initTapData(attributes?.name ?? '')\n  }\n\n  #onOpenTestCase ({ name, attributes, isSelfClosing }) {\n    this.#testCases.push({ name, attributes, isSelfClosing })\n    if (isSelfClosing) this.#stats.passed++\n  }\n\n  #onOpenFailure ({ attributes, isSelfClosing }) {\n    this.#failures.length = 0\n    this.#failures.push({ attributes, isSelfClosing })\n  }\n\n  #onOpenSkipped ({ isSelfClosing }) {\n    if (isSelfClosing) this.#stats.skipped++\n  }\n\n  #onCloseTestCase () {\n    const { attributes, isSelfClosing } = this.#testCases.pop()\n    if (!isSelfClosing && this.#failures.length > 0) {\n      this.#stats.failed++\n    }\n    const title = attributes.name\n    if ('time' in attributes) {\n      this.#yaml.duration_ms = attributes.time * 1000\n      if (!this.#fast) {\n        this.#ms = round(this.#yaml.duration_ms)\n      }\n    }\n    const yaml = this.#yaml\n    if (this.#comments.length > 0) yaml.comments = this.#comments\n    if (this.#failures.length > 0) yaml.failures = this.#failures.map(f => f.attributes)\n    this.#buffer.push(test(title, {\n      index: ++this.#stats.index,\n      passed: this.#failures.length === 0,\n    }))\n    if (Object.keys(yaml).length > 0) {\n      this.#buffer.push(\n        '  ---',\n        stringify(yaml).replace(/^/gm, '  ').replace(/\\n  $/, ''),\n        '  ...',\n      )\n    }\n    this.#comments.length = 0\n    this.#failures.length = 0\n\n    if (this.#ms > 0) {\n      this.#consumedMs += this.#ms\n      this.#flush()\n    }\n  }\n\n  #onCloseTestSuite () {\n    const { attributes } = this.#testSuites.pop()\n    if (!this.#fast && 'time' in attributes) {\n      this.#ms = round(attributes.time * 1000)\n    }\n    this.#buffer.push(finish(this.#stats))\n\n    this.#ms -= this.#consumedMs\n    if (this.#ms < 0) this.#ms = 0\n    else this.#ms = round(this.#ms)\n    this.#consumedMs = 0\n    this.#flush()\n  }\n\n  #flush () {\n    this.#tap += this.#buffer.join(EOL)\n    this.#buffer.length = 0\n    if (!this.#tap.endsWith('\\n')) this.#tap += '\\n'\n\n    const tap = this.#tap\n    const ms = this.#ms\n    this.#promise = this.#promise.then(() => this.#wait(ms, tap))\n    this.#tap = ''\n    this.#ms = 0\n  }\n\n  #wait (ms, tap) {\n    return this.#scheduler.wait(ms).then(() => {\n      this.push(tap)\n    })\n  }\n\n  _transform (chunk, encoding, next) {\n    this.#sax.write(chunk, encoding)\n    next()\n  }\n\n  _flush (next) {\n    this.#promise.then(() => next())\n  }\n}\n\nexport default JUnitTAPTransform\n"],
  "mappings": "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",
  "names": ["scheduler"]
}
